<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>12</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
    <!-- ðŸ‘‡ We don't want to reference the source generator dll directly in consuming projects -->
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <!-- ðŸ‘‡ Generates a package at build -->
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" PrivateAssets="all" />
    <ProjectReference Include="../PrimaryParameter.Diagnostics/PrimaryParameter.Diagnostics.csproj" PrivateAssets="all" />
  </ItemGroup>

  <!-- ðŸ‘‡ This ensures the library will be packaged as a source generator when we use `dotnet pack` -->
  <ItemGroup>
    <None Include="$(OutputPath)/$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <Content Include="../PrimaryParameter.Diagnostics/bin/Release/netstandard2.0/PrimaryParameter.Diagnostics.dll" Pack="true" PackagePath="lib/netstandard2.0" />
    <None Include="../README.md" Pack="true" PackagePath="/" />
    <None Include="../LICENSE" Pack="true" PackagePath="/" />
  </ItemGroup>

  <PropertyGroup>
    <PackageId>FaustVX.PrimaryParameter.CodeFix</PackageId>
    <Version>1.0.0-beta1</Version>
    <Authors>FaustVX</Authors>
    <RepositoryUrl>https://github.com/FaustVX/PrimaryParameter</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageTags>primary constructor parameter readonly field error codefix</PackageTags>
  </PropertyGroup>

</Project>
